doctype html
html(lang="en")
  head
    block head
      block meta
        meta(name='description', content='')
        meta(name='keywords', content='')
      
      link(rel='stylesheet', href='/css/bootstrap-responsive.min.css')
      link(rel='stylesheet', href='/css/bootstrap.min.css')
      link(rel='stylesheet', href='/css/style.css')
      
      title Clasp
  body
    include header

    block content

    include footer

    //- Append your Handlebar template source
    //- Use templateCompile above to compile
    block templates

    //- Append your Bootstrap modals to this to ensure 
    //- they are defined at the root
    block modals
    
    //- IMPORTANT: All JavaScript is loaded last, so if your
    //- JS uses external libs (e.g. handlebars, bootstrap, etc) then
    //- it cannot be executed until $(document).ready is complete. 
    //- You can append to block scriptOnReady in this case
    //- Append to this if you have page-specific JS
    block externalScripts
      script(src='http://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js ' type='text/javascript')
      script(src='/scripts/bootstrap.min.js')
      script(src='/scripts/handlebars.min.js')
      | <script type='text/javascript'>
      //- Global variables for adding top-level data and functions
      //- Note all pages can (potentially) share the DOM, so it's 
      //- important to use these (and even scope further e.g. 
      //- clasp.pageName.myVar) to avoid conflicts
      //- Also, it makes it hella easy to find clasp-specific stuff
      | var templates = {};
      | var clasp = {};
      | $(document).ready(function() {
      |   console.log('Compiling Handlebars templates');
      //- Compile Handlebar templates once the DOM is finished
      //- You need to define them like this:
      //- append templateCompile
      //-   | templates.foobar = Handlebars.compile(...);
      //- 
      //- Tip: Avoid declaring extra vars, you might conflict
      block compileTemplates
      //-
      //- Convenience block for running a script when the DOM is ready
      //- 
      //- Use functions to scope variable names. Perferrably use 
      //- anonymous functions to even avoid function variable name
      //- conflicts. For example: 
      //-   | (function() {
      //-   |  var target = $('#runxacrossy');
      //-   |   var context = {emulators: Math.floor((Math.random() * 20) + 1), nodes: "12"};
      //-   |   var html = templates.runxacrossy(context);
      //-   |   target.html(html);
      //-   | })();
      block scriptOnReady
      | });
      | </script>
      script(src='http://cdn.sockjs.org/websocket-multiplex-0.1.js')
      

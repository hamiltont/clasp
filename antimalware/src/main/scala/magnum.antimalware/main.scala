package magnum.antimalware

import java.io.File

object Main {
  def main(args: Array[String]) = {
    import org.rogach.scallop.ScallopConf;
    val opts = new ScallopConf(args) {
      banner("Android Antimalware.\n" +
        "Usage: java -jar antimalware.jar --mode training")
      val mode = opt[String]("mode",
        descr = "Training/Testing",
        required = true)
      val help = opt[Boolean]("help",
        noshort = true, descr = "Show this message.")
    }

    val mode: String = opts.mode.apply
    if (mode != "Training" && mode != "Testing") {
      println("Unrecognized mode.")
      System.exit(42)
    }

    if (!checkDirStruct(mode)) {
      println("Incorrect directory structure.")
      println("Correct structure:\n" +
              "  ./" + mode + "/Benign\n" +
              "  ./" + mode + "/Malicious")
      System.exit(42)
    }
  }

  private def checkDirStruct(mode: String): Boolean = {
    var subDirs = getSubDirs(".")
    if (!getSubDirs(".").contains(mode)) {
      return false
    }

    var modeSubDirs = getSubDirs(mode)
    if (!modeSubDirs.contains("Benign") ||
        !modeSubDirs.contains("Malicious")) {
      return false
    }
    return true
  }

  private def getSubDirs(dirName: String): Array[String] = {
    var file: File = new File(dirName)
    if (file.listFiles == null) {
      return Array[String]()
    }
    return file.listFiles.filter(_.isDirectory).map(_.getName)
  }
}

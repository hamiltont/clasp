package magnum.antimalware

import java.io.File

object Profiler {
  import core._
  import core.sdktools.sdk._
  import core.sdktools.EmulatorOptions
  import scala.actors._ // For Thread.sleep. TODO remove!

  lazy val infoRegex = """.*name='([^']*)'.*""".r

  var emuOpts = new EmulatorOptions
  emuOpts.noBootAnim = true
  //emuOpts.noWindow = true
  emuOpts.noSnapShotLoad = true
  //emuOpts.wipeData = true // TODO: Wipe user data. Is this working?

  def run(mode: String) {
    println("Collecting.")
    collectEmu(mode, "Benign")
    // TODO: Uncomment.
    //collectEmu(mode, "Malicious")
  }

  def collectEmu(mode: String, classification: String) {
    var file: File = new File(s"$mode/$classification")
    var apkList = file.listFiles
    
    val node = new Node
    // TODO: Should we start a new emulator every app?
    //       Or should that be done only for malicious apps?
    val emulator = node.run_emulator(emuOpts)

    // TODO: Block until ready.
    Thread.sleep(60000)

    println("Installing 'Profiler.apk'.")
    emulator.installApk("Profiler.apk")
    println("Done installing.")
    
    for (apk <- apkList) {
      profileApk(emulator, apk.getName(), mode, classification)
    }
  }

  def profileApk(emulator: Emulator, apkName: String,
                 mode: String, classification: String) {
    println("Starting MalwareActivity.")
    emulator.startActivity("org.vt.magnum.antimalware.main/.MalwareActivity")

    Thread.sleep(5000);
    
    println("Setting the classification to '" + classification + "'.")
    emulator.remoteShell("echo $CLASS > /sdcard/magnum/classification")

    val apkPath = s"$mode/$classification/$apkName"
    emulator.installApk(apkPath)

    // Get the package name.
    val apkInfo = aapt_dump("badging", apkPath)
    val infoRegex(packageName) = apkInfo.split("\n")(0)

    println("Monkey testing application '" + packageName + "'.")
    try {
      emulator.remoteShell(s"monkey -p $packageName" +
        "--pct-syskeys 0 --pct-anyevent 0 -s 0 10000") //TODO seed
    } catch {
      // Some applications don't have main activities.
      // Silently exit.
      case e => return;
    }

    println(s"Pulling the arff for '$packageName'")
    emulator.pull("/sdcard/magnum/malware.arff",
                  s"Arff/$packageName.arff")

    println("Stopping profiling activity.")
    emulator.stopPackage("org.vt.magnum.antimalware.main")
  }
}

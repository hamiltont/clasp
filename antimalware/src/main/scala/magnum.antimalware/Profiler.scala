package magnum.antimalware

import java.io.File

object Profiler {
  import core._
  import core.sdktools.sdk._
  import core.sdktools.EmulatorOptions
  import scala.actors._ // For Thread.sleep. TODO remove!

  lazy val infoRegex = """.*name='([^']*)'.*""".r

  var emuOpts = new EmulatorOptions
  emuOpts.noBootAnim = true; emuOpts.noWindow = true;
  emuOpts.noSnapShotLoad = true; emuOpts.noAudio = true;
  emuOpts.noSkin = true; emuOpts.wipeData = true;
  emuOpts.gpuMode = "off";
  // TODO: Still getting warning: 'Failed to Initialize backend EGL display'
  // TODO: Is wipeData working?

  def run(mode: String) {
    println("Wiping ARFF directory.")
    val arff: File = new File(s"Arff/$mode")
    org.apache.commons.io.FileUtils.deleteDirectory(arff) 

    println("Collecting.")
    kill_adb; start_adb; // Helps the device appear more often.
    collectEmu(mode, "Benign")
    collectEmu(mode, "Malicious")
  }

  def collectEmu(mode: String, classification: String) {
    var file: File = new File(s"$mode/$classification")
    var apkList = file.listFiles

    // TODO Put sdcards in a subdirectory.
    // TODO Do we need a subdirectory for different AVDs?
    mksdcard("256MB", "sdcard.img")
    emuOpts.sdCard = "sdcard.img"
    
    val node = new Node
    // TODO: Should we start a new emulator every app?
    //       Or should that be done only for malicious apps?
    val emulator = node.run_emulator(emuOpts)

    // TODO: Block until ready.
    Thread.sleep(60000)

    println("Installing 'Profiler.apk'.")
    emulator.installApk("Profiler.apk")
    println("Done installing.")
    
    for (apk <- apkList) {
      try {
        profileApk(emulator, apk.getName(), mode, classification)
      } catch {
        case e: Throwable => {
          println("Exception caught. Continuing.")
          e.printStackTrace
        }
      } finally {
        println("Stopping profiling activity.")
        emulator.stopPackage("org.vt.magnum.antimalware.main")
      }
    }
    emulator.cleanup
  }

  def profileApk(emulator: Emulator, apkName: String,
                 mode: String, classification: String) {
    println("Starting MalwareActivity.")
    emulator.startActivity("org.vt.magnum.antimalware.main/.MalwareActivity")

    Thread.sleep(5000);
    
    var posNeg = "positive"
    if (classification == "Benign") posNeg = "negative"
    println("Setting the classification to '" + posNeg + "'.")
    emulator.remoteShell(s"echo $posNeg > /sdcard/magnum/classification")

    val apkPath = s"$mode/$classification/$apkName"
    emulator.installApk(apkPath)

    // Get the package name.
    val apkInfo = aapt_dump("badging", apkPath)
    val infoRegex(packageName) = apkInfo.split("\n")(0)

    println("Monkey testing application '" + packageName + "'.")
    emulator.remoteShell(s"monkey -p $packageName " +
      "--pct-syskeys 0 --pct-anyevent 0 -s 0 10000") //TODO seed

    println(s"Pulling the arff for '$packageName'")
    emulator.pull("/sdcard/magnum/malware.arff",
                 s"Arff/$mode/$packageName.arff")
  }
}

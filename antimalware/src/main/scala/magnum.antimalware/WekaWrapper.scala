package magnum.antimalware

object WekaWrapper {
  import java.io.{File,FileWriter}
  import java.util.Random
  import weka.core.Instances
  import weka.core.converters.ArffLoader
  import weka.classifiers.bayes.BayesNet
  import weka.classifiers.{Classifier,Evaluation}

  def run(mode: String) {
    try {
      combineAllArffs(mode)

      val resultsDir = new File("Results")
      resultsDir.mkdir
      if (mode == "Training") {
        val cvDir = new File("Results/CV")
        org.apache.commons.io.FileUtils.deleteDirectory(cvDir) 
        cvDir.mkdir


        var arffLoader = new ArffLoader
        val trainingArffFile = new File(s"Arff/$mode.arff")
        arffLoader.setFile(trainingArffFile)
        val train = arffLoader.getDataSet
        train.setClassIndex(train.numAttributes-1)
        crossValidate(new BayesNet, "BayesNet", train)
      }
    } catch {
      case e: Throwable => {
        println("Exception caught. Aborting.")
        e.printStackTrace
      }
    }
  }

  def combineAllArffs(mode: String) {
    var arffLoader = new ArffLoader
    val arffDir: File = new File(s"Arff/$mode")

    val arffList = arffDir.listFiles;
    var instances: Instances = null
    var structure: Instances = null

    for (arffFile <- arffList) {
      arffLoader.setFile(arffFile)
      if (instances == null) {
        instances = arffLoader.getDataSet
        structure = arffLoader.getStructure
      } else {
        var newInstances = arffLoader.getDataSet
        var i = 0
        while (i < newInstances.numInstances) {
          val instance = newInstances.instance(i)
          instances.add(instance)
          i += 1
        }
      }
      arffLoader.reset
    }

    val combinedFile = new File(s"Arff/$mode.arff")
    val fw = new FileWriter(combinedFile)
    fw.write(instances.toString)
    fw.close
  }

  def crossValidate(cls: Classifier, name: String, train: Instances) {
    // TODO: Suppress output from this?
    cls.buildClassifier(train)
    val eval = new Evaluation(train)
    eval.crossValidateModel(cls, train, 10, new Random(1)) //TODO: Seed?
    val title = "10-fold Cross Valdition\n" +
                "======================="
    val cvFile = new File(s"Results/CV/$name.txt")
    val fw = new FileWriter(cvFile)
    fw.write(eval.toSummaryString(title, false))
    fw.close
  }
}

package magnum.antimalware

import scala.sys.process._
import scala.language.reflectiveCalls

import org.rogach.scallop.ScallopConf;

import java.io.File

import clasp._
import clasp.core.sdktools.EmulatorOptions

object Main extends App {
  val emuOpts = new EmulatorOptions
  emuOpts.noBootAnim = true; //emuOpts.noWindow = true;
  emuOpts.noSnapShotLoad = true; emuOpts.noAudio = true;
  emuOpts.noSkin = true; emuOpts.wipeData = true;
  emuOpts.httpProxy = "0.0.0.0:0"; emuOpts.gpuMode = "off";
  // TODO: Still getting warning: 'Failed to Initialize backend EGL display'
  // TODO: Is wipeData working?

  val opts = new AntimalwareConf(args)

  var mode: String = ""
  if (!opts.client()) {
    if (! opts.mode.isSupplied) {
      println("Mode not supplied.")
      System.exit(42)
    }
    mode = opts.mode()
    if (mode != "Training" && mode != "Testing") {
      println("Unrecognized mode.")
      System.exit(42)
    }

    if (!checkDirStruct(mode)) {
      println("Incorrect directory structure.")
      println("Correct structure:\n" +
              "  ./" + mode + "/Benign\n" +
              "  ./" + mode + "/Malicious")
      System.exit(42)
    }

    var antimalware = new File("Profiler.apk")
    if (! antimalware.exists) {
      println("'Profiler.apk' not found. Exiting.")
      System.exit(42)
    }
  }

  //if(opts.client() && !opts.wekaOnly()) {
  if(opts.client()) {
    new ClaspClient(opts, emuOpts)
  } else {
    if(!opts.wekaOnly()) {
      var clasp = new ClaspMaster(opts)
      //Partitioner.partition(mode, numEmu)
      Profiler.run(mode, clasp)
      //Partitioner.unpartition(mode)
    }
    WekaWrapper.run(mode)
  }

  private def checkDirStruct(mode: String): Boolean = {
    var subDirs = getSubDirs(".")
    if (!getSubDirs(".").contains(mode)) {
      return false
    }

    var modeSubDirs = getSubDirs(mode)
    if (!modeSubDirs.contains("Benign") ||
        !modeSubDirs.contains("Malicious")) {
      return false
    }
    return true
  }

  private def getSubDirs(dirName: String): Array[String] = {
    var file: File = new File(dirName)
    if (file.listFiles == null) {
      return Array[String]()
    }
    return file.listFiles.filter(_.isDirectory).map(_.getName)
  }
}

class AntimalwareConf(args: Seq[String]) extends ClaspConf(args) {
  version("Android Antimalware 0.0.0")
  banner("Usage: antimalware --mode <training/testing>")
  val mode = opt[String] (
    "mode", descr = "Training/Testing")
  val wekaOnly = opt[Boolean](
    "wekaonly", descr = "Don't profile and only run Weka's analysis.")
  val help = opt[Boolean]("help",
    noshort = true, descr = "Show this message.")
}

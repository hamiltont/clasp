package magnum.antimalware

import scala.sys.process._
import scala.language.reflectiveCalls

import java.io.File
import org.rogach.scallop.ScallopConf;
import clasp.Clasp

object Main {
  def main(args: Array[String]) = {
    val opts = new AntimalwareConf(args)

    var mode: String = ""
    if (!opts.client()) {
      if (! opts.mode.isSupplied) {
        println("Mode not supplied.")
        System.exit(42)
      }
      mode = opts.mode()
      if (mode != "Training" && mode != "Testing") {
        println("Unrecognized mode.")
        System.exit(42)
      }

      if (!checkDirStruct(mode)) {
        println("Incorrect directory structure.")
        println("Correct structure:\n" +
                "  ./" + mode + "/Benign\n" +
                "  ./" + mode + "/Malicious")
        System.exit(42)
      }

      var antimalware = new File("Profiler.apk")
      if (! antimalware.exists) {
        println("'Profiler.apk' not found. Exiting.")
        System.exit(42)
      }
    }

    var clasp: Clasp = null
    if(!opts.wekaOnly()) {
      var ip: String = "10.0.2." + "hostname".!!;
      if (opts.ip.get != None) ip = opts.ip()
      ip = ip.stripLineEnd
      clasp = new Clasp(ip, opts.client())
    }

    if (!opts.client()) {
    //if(!opts.wekaOnly.isSupplied || !opts.wekaOnly.apply) {
      if(!opts.wekaOnly()) {
        var numEmu = 1;
        if (opts.numEmu.isSupplied) numEmu = opts.numEmu.apply
        //Partitioner.partition(mode, numEmu)
        Profiler.run(mode, clasp)
        //Partitioner.unpartition(mode)
      }
      WekaWrapper.run(mode)
    }
  }

  private def checkDirStruct(mode: String): Boolean = {
    var subDirs = getSubDirs(".")
    if (!getSubDirs(".").contains(mode)) {
      return false
    }

    var modeSubDirs = getSubDirs(mode)
    if (!modeSubDirs.contains("Benign") ||
        !modeSubDirs.contains("Malicious")) {
      return false
    }
    return true
  }

  private def getSubDirs(dirName: String): Array[String] = {
    var file: File = new File(dirName)
    if (file.listFiles == null) {
      return Array[String]()
    }
    return file.listFiles.filter(_.isDirectory).map(_.getName)
  }
}

class AntimalwareConf(args: Seq[String]) extends ScallopConf(args) {
  version("Android Antimalware 0.0.0")
  banner("Usage: antimalware --mode <training/testing>")
  val mode = opt[String] (
    "mode", descr = "Training/Testing")
  val wekaOnly = opt[Boolean](
    "wekaonly", descr = "Don't profile and only run Weka's analysis.")
  val numEmu = opt[Int](
    "numemu", descr = "The number of emulators to run. (Unsupported.)")
  val client = opt[Boolean](descr = "Should this run as a client instance.")
  val ip = opt[String] (descr = "Informs Clasp of the IP.")
  val help = opt[Boolean]("help",
    noshort = true, descr = "Show this message.")
}

package magnum.antimalware

import java.io.File

import scala.actors._ // For Thread.sleep. TODO remove!
import scala.language.postfixOps

import clasp._
import clasp.core._
import clasp.core.sdktools._

object Profiler {
  lazy val infoRegex = """.*name='([^']*)'.*""".r
  var clasp: ClaspMaster = null
  var apkIndex: Int = 0
  var apkList: Array[File] = null

  def run(mode: String, clasp: ClaspMaster) {
    this.clasp = clasp

    println("Wiping ARFF directory.")
    val arff: File = new File(s"Arff/$mode")
    org.apache.commons.io.FileUtils.deleteDirectory(arff) 

    println("Collecting.")
    collectEmu(mode, "Benign")
    //collectEmu(mode, "Malicious")
  }

  def collectEmu(mode: String, classification: String) {
    println(s"Profiling $mode $classification applications.")
    var file: File = new File(s"$mode/$classification")
    apkList = file.listFiles
    apkIndex = 0

    // TODO: Block until ready.
    println("Sleeping for 1 minute before continuing.")
    Thread.sleep(60000)

    val devices = clasp.get_devices

    for (device <- devices) {
      println("Installing 'Profiler.apk'.")
      device.installApk("Profiler.apk")
      println("Done installing.")
    }

    // Register the callback.
    var ccb = new ClaspCallbacks
    ccb.registerProfilingCallback(
      (emu: Emulator) => profileApkCallback(emu, mode, classification))

    // Seed the devices.
    for (device <- devices) {
      ccb.runItem(device)
    }

    println(s"Waiting to finish $mode $classification applications.")
    while (apkIndex < apkList.size) {
      Thread.sleep(1000)
    }
  }

  def profileApkCallback(emulator: Emulator,
                 mode: String, classification: String): Boolean = {
    var apkName: Option[String] = None
    synchronized {
      if (apkIndex >= apkList.size) {
        println("No work to do.")
        return false
      }
      println(s"Currently profiling: $apkIndex")
      apkName = Option(apkList(apkIndex).getName())
      apkIndex += 1
    }

    while (true) {
      try {
        println(s"apkName = ${apkName.get}")
        var posNeg = "positive"
        if (classification == "Benign") posNeg = "negative"
        println("Setting the classification to '" + posNeg + "'.")
        emulator.remoteShell(s"echo $posNeg > /sdcard/magnum/classification")
        Thread.sleep(5000) // Try to fix issue with this?

        val apkPath = s"$mode/$classification/${apkName.get}"
        emulator.installApk(apkPath)

        println("Starting MalwareActivity.")
        emulator.startActivity("org.vt.magnum.antimalware.main/.MalwareActivity")

        // Get the package name.
        val apkInfo = sdk.aapt_dump("badging", apkPath)
        val infoRegex(packageName) = apkInfo.split("\n")(0)

        println("Monkey testing application '" + packageName + "'.")
        emulator.remoteShell(s"monkey -p $packageName " +
          "--pct-syskeys 0 " +
          "--pct-appswitch 0 " +
          "--pct-anyevent 0 " +
          "-s 0 10000") //TODO seed

        println(s"Pulling the arff for '$packageName'")
        emulator.pull("/sdcard/magnum/malware.arff",
                     s"Arff/$mode/$packageName.arff")
        return true
      } catch {
        case e: Exception => {
          // TODO: This is suboptimal, but should work.
          println("Caught exception. Restarting emulator and retrying.")
          emulator.restart
          println("Sleeping for a minute for emulator to boot.")
          Thread.sleep(60000)
        }
      }
    }
    return false
  }
}

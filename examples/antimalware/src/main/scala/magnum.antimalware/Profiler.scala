package magnum.antimalware

import java.io.File

import scala.actors._ // For Thread.sleep. TODO remove!

import clasp._
import core._
import core.sdktools._

object Profiler {
  var clasp: Clasp = null
  lazy val infoRegex = """.*name='([^']*)'.*""".r

  def run(mode: String, clasp: Clasp) {
    this.clasp = clasp

    println("Wiping ARFF directory.")
    val arff: File = new File(s"Arff/$mode")
    org.apache.commons.io.FileUtils.deleteDirectory(arff) 

    println("Collecting.")
    //kill_adb; start_adb; // Helps the device appear more often.
    collectEmu(mode, "Benign")
    collectEmu(mode, "Malicious")
  }

  def collectEmu(mode: String, classification: String) {
    var file: File = new File(s"$mode/$classification")
    var apkList = file.listFiles

    // TODO: Block until ready.
    println("Sleeping for 5 minutes before continuing.")
    Thread.sleep(60000*5)

    val devices = clasp.get_devices

    for (device <- devices) {
      println("Installing 'Profiler.apk'.")
      device.installApk("Profiler.apk")
      println("Done installing.")
    }
        
    /*
    for (apk <- apkList) {
      try {
        profileApk(emulator, apk.getName(), mode, classification)
      } catch {
        case e: Throwable => {
          println("Exception caught. Continuing.")
          e.printStackTrace
        }
      } finally {
        println("Stopping profiling activity.")
        emulator.stopPackage("org.vt.magnum.antimalware.main")
      }
    }
    emulator.cleanup
    */
  }

  def profileApk(emulator: Emulator, apkName: String,
                 mode: String, classification: String) {
    /*
    var posNeg = "positive"
    if (classification == "Benign") posNeg = "negative"
    println("Setting the classification to '" + posNeg + "'.")
    emulator.remoteShell(s"echo $posNeg > /sdcard/magnum/classification")

    val apkPath = s"$mode/$classification/$apkName"
    emulator.installApk(apkPath)

    println("Starting MalwareActivity.")
    emulator.startActivity("org.vt.magnum.antimalware.main/.MalwareActivity")

    // Get the package name.
    val apkInfo = aapt_dump("badging", apkPath)
    val infoRegex(packageName) = apkInfo.split("\n")(0)

    println("Monkey testing application '" + packageName + "'.")
    emulator.remoteShell(s"monkey -p $packageName " +
      "--pct-syskeys 0 --pct-anyevent 0 -s 0 10000") //TODO seed

    println(s"Pulling the arff for '$packageName'")
    emulator.pull("/sdcard/magnum/malware.arff",
                 s"Arff/$mode/$packageName.arff")
    */
  }
}

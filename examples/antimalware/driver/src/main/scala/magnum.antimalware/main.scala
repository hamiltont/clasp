package magnum.antimalware

import scala.sys.process._
import scala.language.reflectiveCalls

import org.rogach.scallop.ScallopConf;

import java.io.File

import clasp._
import clasp.core.sdktools.EmulatorOptions

object Main extends App {
  val emuOpts = new EmulatorOptions
  emuOpts.noBootAnim = true; //emuOpts.noWindow = true;
  emuOpts.noSnapShotLoad = true; emuOpts.noAudio = true;
  emuOpts.noSkin = true; emuOpts.wipeData = true;
  emuOpts.httpProxy = "0.0.0.0:0"; emuOpts.gpuMode = "off";
  // TODO: Still getting warning: 'Failed to Initialize backend EGL display'
  // TODO: Is wipeData working?

  val opts = new AntimalwareConf(args)

  if(opts.client()) {
    new ClaspClient(opts, emuOpts)
  } else {
    // TODO: Make sure this is working.
    val profilerApk = new File((opts.profilerApk.get orElse
      Option[String]("../profiler/bin/Profiler-debug.apk")).get)
    
    if (!profilerApk.exists) {
      println("s'$profiler' not found. Exiting.")
      System.exit(42)
    }

    if (!opts.appsTag.isSupplied || !opts.arffTag.isSupplied) {
      println("Error: `appsTag` and `arffTag` are both required.")
      System.exit(42)
    }
    Driver.run(new ClaspMaster(opts), profilerApk.getPath,
      opts.appsTag.apply, opts.arffTag.apply,
      opts.maxBenignApps.get, opts.maxMaliciousApps.get)
  }
}

class AntimalwareConf(args: Seq[String]) extends ClaspConf(args) {
  version("Antimalware driver.")
  banner("""Antimalware's driver dynamically profiles a set of applications
           |to obtain a set of feature vectors.
           |
           | + The application set is `../apps/<appsTag>`.
           | + The feature vector set is `../arff/<arffTag>`.
           |
           |Where <appsTag> and <arffTag> are arguments described below.
           |
           |Argument list.
  """.stripMargin)
  val profilerApk = opt[String] (
    "profilerApk", descr="Path to the profiler APK.")
  val appsTag = opt[String] (
    "appsTag", descr="Specific tag within the `apps` directory to use.")
  val arffTag = opt[String] (
    "arffTag", descr="Specific tag within the `arff` directory to use.")
  val maxBenignApps = opt[Int] (
    "maxBenignApps", descr="The max number of benign apps to profile.")
  val maxMaliciousApps = opt[Int] (
    "maxMaliciousApps", descr="The max number of malicious apps to profile.")
  val help = opt[Boolean]("help",
    noshort = true, descr = "Show this message.")
}

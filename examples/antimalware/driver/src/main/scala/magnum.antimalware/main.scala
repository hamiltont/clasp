package magnum.antimalware

import scala.sys.process._
import scala.language.reflectiveCalls

import org.rogach.scallop.ScallopConf;
import org.rogach.scallop.ScallopOption;

import java.io.File

import clasp._
import clasp.core.sdktools.EmulatorOptions

object AntimalwareMain extends App {
  val emuOpts = new EmulatorOptions
  emuOpts.noBootAnim = true; // emuOpts.noWindow = true;
  emuOpts.noSnapShotLoad = true; emuOpts.noAudio = true;
  emuOpts.noSkin = true; emuOpts.wipeData = true;
  emuOpts.httpProxy = "0.0.0.0:0"; emuOpts.gpuMode = "off";
  // TODO: Still getting warning: 'Failed to Initialize backend EGL display'
  // TODO: Is wipeData working?

  val opts = new AntimalwareConf(args)

  if(opts.client()) {
    new ClaspClient(opts, emuOpts)
  } else {
    List(
      (opts.appsTag, "appsTag"),
      (opts.fvTag, "fvTag"),
      (opts.throttle, "throttle"),
      (opts.numberOfEvents, "numberOfEvents")
    ).map( optTag => {
      if (!optTag._1.isSupplied) {
        println(s"Error: `${optTag._2}` not found. Exiting.")
        System.exit(42)
      }
    })

    val profilerApk = new File((opts.profilerApk.get orElse
      Option[String]("../profiler/bin/Profiler-debug.apk")).get)
    
    if (!profilerApk.exists) {
      println(s"'$profilerApk' not found. Exiting.")
      System.exit(42)
    }

    val profilerMainActivity = (opts.profilerMainActivity.get orElse
      Option[String]("io.magnum.antimalware/.AntimalwareActivity")).get

    Driver.run(new ClaspMaster(opts),
      profilerApk.getPath, profilerMainActivity,
      opts.appsTag.apply, opts.fvTag.apply,
      opts.maxBenignApps.get, opts.maxMaliciousApps.get,
      opts.throttle.apply, opts.numberOfEvents.apply)
  }
}

class AntimalwareConf(args: Seq[String]) extends ClaspConf(args) {
  version("Antimalware driver.")
  banner("""Antimalware's driver dynamically profiles a set of applications
           |to obtain a set of feature vectors.
           |
           | + The application set is `../apps/<appsTag>`.
           | + The feature vector set is `../fv/<fvTag>`.
           |
           |Where <appsTag> and <fvTag> are arguments described below.
           |
           |Information from the profiling, such as monkey options,
           |is logged in `../fv/<fvTag>/info.txt`.
           |
           |A timeout after queueing the tasks is defined in Driver.scala.
  """.stripMargin)
  val profilerApk = opt[String] (
    "profilerApk", descr="Path to the profiler APK.")
  val profilerMainActivity = opt[String] (
    "profilerMainActivity", descr="The profiler APK's main class.")
  val appsTag = opt[String] (
    "appsTag", descr="Specific tag within the `apps` directory to use.")
  val fvTag = opt[String] (
    "fvTag", descr="Specific tag within the `fv` directory to use.")
  val maxBenignApps = opt[Int] (
    "maxBenignApps", descr="The max number of benign apps to profile.")
  val maxMaliciousApps = opt[Int] (
    "maxMaliciousApps", descr="The max number of malicious apps to profile.")
  val throttle = opt[Int] ("throttle")
  val numberOfEvents = opt[Int] ("numberOfEvents")
  val help = opt[Boolean]("help",
    noshort = true, descr = "Show this message.")
}

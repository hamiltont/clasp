package magnum.antimalware

import scala.sys.process._
import scala.language.reflectiveCalls

import org.rogach.scallop.ScallopConf;

import java.io.File

import clasp._
import clasp.core.sdktools.EmulatorOptions

object Main extends App {
  val emuOpts = new EmulatorOptions
  emuOpts.noBootAnim = true; //emuOpts.noWindow = true;
  emuOpts.noSnapShotLoad = true; emuOpts.noAudio = true;
  emuOpts.noSkin = true; emuOpts.wipeData = true;
  emuOpts.httpProxy = "0.0.0.0:0"; emuOpts.gpuMode = "off";
  // TODO: Still getting warning: 'Failed to Initialize backend EGL display'
  // TODO: Is wipeData working?

  val opts = new AntimalwareConf(args)

  if(opts.client()) {
    new ClaspClient(opts, emuOpts)
  } else {
    // TODO: Make sure this is working.
    val profilerApk = new File((opts.profilerApk.get orElse
      Option[String]("../profiler/bin/Profiler-debug.apk")).get)
    
    if (!profilerApk.exists) {
      println("s'$profiler' not found. Exiting.")
      System.exit(42)
    }

    Driver.run(new ClaspMaster(opts), profilerApk.getPath)
  }
}

class AntimalwareConf(args: Seq[String]) extends ClaspConf(args) {
  version("Antimalware::driver.")
  // TODO: Write usage instructions.
  //banner("""Antimalware.
  // |  Profiler: Expects to create feature vectors at /sdcard/...
  // """.stripMargin
  //)
  val profilerApk = opt[String] (
    "profilerApk", descr="Path to the profiler APK.")
  // TODO: Possible parameters.
  //   + Monkey options.
  val help = opt[Boolean]("help",
    noshort = true, descr = "Show this message.")
}

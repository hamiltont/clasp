#!/usr/bin/env python2

import argparse
import json
import os
import sqlite3 as lite
import time
import virustotal

from job_queue import Job_Queue
from multiprocessing import Process

jobs = Job_Queue(10) # Parameter is number of procs at a time.

parser = argparse.ArgumentParser(
description='Scan a directory with VirusTotal.')
parser.add_argument('directory', type=str)
args = parser.parse_args()

def scan(fname):
  print("[" + fname + "] Scanning.")
  v = virustotal.VirusTotal('8488f4b84e9c2010c95b17df236466a42f46e6762a2739da4caa6cf1c9178ad3')
  report = None; attempts = 0;
  while report is None and attempts < 5:
    try:
      report = v.scan(args.directory+"/"+fname)
      report.join()
    except:
      print("[" + fname + "] Limit reached (or other error). Waiting 15s.")
      time.sleep(15) # Seconds.
      attempts = attempts + 1
      report = None
      pass

  if report:
    classifications = {}
    for antivirus, malware in report:
      classifications[antivirus[0]] = [antivirus[1], antivirus[2], malware]

    jsonStr = json.dumps({
      "total": report.total,
      "malware-positives": report.positives,
      "uid": report.id,
      "scan uid": report.scan_id,
      "md5": report.md5,
      "status": report.status,
      "classifications": classifications
    })

    con = lite.connect(args.directory + '.db3', timeout=15)
    with con:
      cur = con.cursor()
      cur.execute("CREATE TABLE IF NOT EXISTS Apps(ID TEXT, CONTENTS TEXT)")
      cur.execute("INSERT INTO Apps VALUES(?, ?)", (fname, jsonStr))
      con.commit()

for fname in os.listdir(args.directory):
  if os.path.getsize(args.directory+"/"+fname) > 32000000:
    print("Warning: " + fname + " too large.")
  else:
    jobs.append(Process(target=scan, args = [fname], kwargs = {}))

jobs.close()
jobs.start()

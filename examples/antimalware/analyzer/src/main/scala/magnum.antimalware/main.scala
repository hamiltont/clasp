package magnum.antimalware

import org.rogach.scallop.ScallopConf;

object Main extends App {
  val opts = new WekaConf(args)
  val randomSeed = opts.randomSeed.get orElse Option[Long](0)
  val wekaWrapper = new WekaWrapper(opts.fvTag.apply, opts.resultsTag.apply,
    opts.percentBenignTrain.apply, opts.percentMaliciousTrain.apply,
    randomSeed.get)
  wekaWrapper.run()
}

class WekaConf(args: Seq[String]) extends ScallopConf(args) {
  version("Antimalware profiler.")
  banner("""Antimalware's profiler uses Weka to analyze feature
           |vectors with machine learning algorithms.
  """.stripMargin)
  val fvTag = opt[String] ("fvTag", required=true,
    descr="Specific tag within the `fv` directory to use.")
  val resultsTag = opt[String] ("resultsTag", required=true,
    descr="Specific tag within the `results` directory to use.")
  val percentBenignTrain = opt[Int] ("percentBenignTrain", required=true,
    descr="The percent of benign apps to randomly include in the training set.")
  val percentMaliciousTrain = opt[Int] ("percentMaliciousTrain", required=true,
    descr="The percent of malicious apps to randomly include in the training set.")
  val randomSeed = opt[Long] ("randomSeed",
    descr="The seed to use for selecting applications. Defaults to 0.")
}

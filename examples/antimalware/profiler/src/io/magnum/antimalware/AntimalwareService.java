package io.magnum.antimalware;

import io.magnum.antimalware.features.*;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.lang.Integer;
import java.lang.CharSequence;
import java.lang.StringBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import android.app.ActivityManager;
import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Environment;
import android.os.IBinder;
import android.text.format.Time;
import android.util.Log;

import com.google.common.io.Files;
import com.google.common.base.Charsets;
import com.google.common.base.Joiner;

public class AntimalwareService extends Service {
  private static final String TAG = "MalwareService";
  private ScheduledExecutorService _scheduledExecutor;
  private AbstractFeatures[] _allFeatures;
  private PrintWriter _allFeaturesWriter;
  private BatteryFeatures _batteryFeatures;
  private int numChecked = 0;

  @Override
  public void onCreate() {
    _batteryFeatures = new BatteryFeatures();
    _allFeatures = new AbstractFeatures[] { _batteryFeatures,
      new BinderFeatures(), new CPUFeatures(), new MemoryFeatures() };
    // TODO: Network features?
    // TODO: Permission features?

    IntentFilter battFilter = new IntentFilter(Intent.ACTION_BATTERY_CHANGED);
    registerReceiver(
      new BroadcastReceiver() {
        @Override public void onReceive(Context context, Intent intent) {
          _batteryFeatures._lastIntent = intent;
        }
      }, battFilter
    );
    
    File magDir = new File(Environment.getExternalStorageDirectory()
        .getAbsolutePath() + "/magnum/");
    magDir.mkdirs();
    File allFeaturesFile = new File(magDir, "vectors");

    // Write the tags to the first line of the file.
    List<String> allTags = new LinkedList<String>();
    for (AbstractFeatures features : _allFeatures) {
      for (String tag : features.getTags()) {
        allTags.add(tag);
      }
    }
    try {
      _allFeaturesWriter = new PrintWriter(allFeaturesFile);
    } catch (Exception e) {
      Log.v(TAG, "Unable to open feature vector file.");
    }
    _allFeaturesWriter.write(Joiner.on(",").skipNulls().join(allTags) + "\n");
    _allFeaturesWriter.flush();

    _scheduledExecutor = Executors.newScheduledThreadPool(1);
    _scheduledExecutor.scheduleAtFixedRate(new Runnable() {
      public void run() { fetchAndAppendSnapshot(); }
    }, 1, 10, TimeUnit.SECONDS);
  }

  @Override public IBinder onBind(Intent intent)   { return null; }
  @Override public boolean onUnbind(Intent intent) {
    _allFeaturesWriter.close();
    return true;
  }

  public void fetchAndAppendSnapshot() {
    List<String> featureVector = new LinkedList<String>();
    for (AbstractFeatures features : _allFeatures) {
      FeatureValue[] featureValues = features.getFeatureVector();
      if (featureValues == null) {
        _allFeaturesWriter.append("featureValues null.\n");
        _allFeaturesWriter.flush();
        return;
      } else {
        for (FeatureValue feature : features.getFeatureVector()) {
          featureVector.add(feature.toString());
        }
      }
    }
    // Ignore the first call so vectors depending on the previous
    // vector will be initialized.
    if (numChecked != 0) {
      _allFeaturesWriter.append(Joiner.on(",").skipNulls()
          .join(featureVector) + "\n");
      _allFeaturesWriter.flush();
    }
    ++numChecked;
  }
}

package io.magnum.antimalware.features;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

/**
 * Provides methods for making file parsing simpler.
 */
public class FileParser {
  private String _fileName;
  private BufferedReader _reader;

  private int _currentLine;
  private String[] _tokens;

  public boolean load( String file ) {
    _fileName = file;
    if (_reader != null) close();
    try {
      _reader = new BufferedReader( new FileReader( _fileName ) );
    } catch (Exception e) {
      return false;
    }
    _currentLine = -1;
    _tokens = null;
    return true;
  }

  public int readInt( int lineNum, int tokenNum ) {
    return Integer.parseInt( read( lineNum, tokenNum ) );
  }

  /**
   * Gets a specific piece of data from a text file.
   * To avoid reloading the file, make the line index calls
   * only ascend.
   * 
   * @param lineIndex The zero-based index of the line
   * @param tokenIndex The zero-based index of the token
   * @return The String at the specified location
   */
  public String read(int lineIndex, int tokenIndex) {
    // If the lines are passed out of order, reload the file
    if ( lineIndex < _currentLine )
      load(_fileName);

    if ( lineIndex == _currentLine )
      return _tokens[ tokenIndex ];

    while ( _currentLine < lineIndex ) {
      String lineStr;
      try {
        lineStr = _reader.readLine();
      } catch (Exception e) { return null; }
      _tokens = lineStr.split("\\s+"); // Whitespace
      _currentLine++;
    }

    return _tokens[ tokenIndex ];
  }

  public void close() {
    try {
      if ( _reader != null ) {
        _reader.close();
        _reader = null;
      }
    } catch (Exception e) { }
  }
}

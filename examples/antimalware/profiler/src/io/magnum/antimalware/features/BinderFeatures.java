package io.magnum.antimalware.features;

import java.io.FileNotFoundException;
import java.util.ArrayList;

import android.util.Log;

/**
 * Get binder features by parsing /proc/binder/stats.
 */
public class BinderFeatures extends AbstractFeatures {
  private static final String TAG = "BinderFeatures";
  int _totalNodes, _totalRef, _totalDeath,
          _totalTransaction, _totalTransactionComplete = -1;
  
  public BinderFeatures() {
    _tags = new String[] {
      "binderTransaction",
      "binderReply",
      "binderAcquire",
      "binderRelease",

      "binderActiveNodes",
      "binderTotalNodes",
      "binderTotalNodesDiff",

      "binderActiveRef",
      "binderTotalRef",
      "binderTotalRefDiff",

      "binderActiveDeath",
      "binderTotalDeath",
      "binderTotalDeathDiff",

      "binderActiveTransaction",
      "binderTotalTransaction",
      "binderTotalTransactionDiff",

      "binderActiveTransactionComplete",
      "binderTotalTransactionComplete",
      "binderTotalTransactionCompleteDiff"};
  }

  public FeatureValue[] getFeatureVector() {
    FileParser fp = new FileParser();

    // Devices with kernel 3 have /sys/kernel/debug/binder/stats
    // while devices with kernel 2 have /proc/binder/stats
    if (!fp.load("/sys/kernel/debug/binder/stats") &&
        !fp.load( "/proc/binder/stats" )) {
      Log.w(TAG, "Unable to open binder statistics.");
      return null;
    }
    int transaction = fp.readInt( 1, 1 );
    int reply = fp.readInt( 2, 1 );
    int acquire = fp.readInt( 5, 1 );
    int release = fp.readInt( 6, 1 );

    int activeNodes = fp.readInt( 24, 2 );
    int totalNodes = fp.readInt( 24, 4 );
    int totalNodesDiff = totalNodes - _totalNodes;
    _totalNodes = totalNodes;

    int activeRef = fp.readInt( 25, 2 );
    int totalRef = fp.readInt( 25, 4 );
    int totalRefDiff = totalRef - _totalRef;
    _totalRef = totalRef;

    int activeDeath = fp.readInt( 26, 2 );
    int totalDeath = fp.readInt( 26, 4 );
    int totalDeathDiff = totalDeath - _totalDeath;
    _totalDeath = totalDeath;

    int activeTransaction = fp.readInt( 27, 2 );
    int totalTransaction = fp.readInt( 27, 4 );
    int totalTransactionDiff = totalTransaction - _totalTransaction;
    _totalTransaction = totalTransaction;

    int activeTransactionComplete = fp.readInt( 28, 2 );
    int totalTransactionComplete = fp.readInt( 28, 4 ); 
    int totalTransactionCompleteDiff = 
      totalTransactionComplete - _totalTransactionComplete;
    _totalTransactionComplete = totalTransactionComplete;

    fp.close();
    return new FeatureValue[] {
      new FeatureValue(transaction),
      new FeatureValue(reply),
      new FeatureValue(acquire),
      new FeatureValue(release),

      new FeatureValue(activeNodes),
      new FeatureValue(totalNodes),
      new FeatureValue(totalNodesDiff),

      new FeatureValue(activeRef),
      new FeatureValue(totalRef),
      new FeatureValue(totalRefDiff),

      new FeatureValue(activeDeath),
      new FeatureValue(totalDeath),
      new FeatureValue(totalDeathDiff),

      new FeatureValue(activeTransaction),
      new FeatureValue(totalTransaction),
      new FeatureValue(totalTransactionDiff),

      new FeatureValue(activeTransactionComplete),
      new FeatureValue(totalTransactionComplete),
      new FeatureValue(totalTransactionCompleteDiff)
    };
  }
}

most
data = aggregate(gss$jobinc, by=list(gss$year), table)
most = data$x[1:29]
most
start = 30
rest = data$x[start:start+28]
rest
rest = data$x[start:start+28]
rest
rest = data$x[30:30+28]
rest
rest = data$x[30:58]
rest
rest = data$x[30:(30+28)]
rest
data$x
rest
rest2 = data$x[start:(start+28)]
rest2
start = start + 28
rest2 = data$x[start:(start+28)]
rest2
start = start+1
rest2 = data$x[start:(start+28)]
rest2
start = start + 29
rest3 = data$x[start:(start+28)]
start = start + 29
rest4 = data$x[start:(start+28)]
rest3
rest4
rest = rest + rest2 + rest3 + rest4
rest
plot(y=most/rest, x=data$Group.1, type='l', col=3, ylab="", xlab="Year", xaxt='n', main="Ratio of Self-Employed to Non-Self-Employed")
most
rest / most
most
plot(y=rest, x=data$Group.1, type='l', col=3, ylab="", xlab="Year", xaxt='n', main="Ratio of Self-Employed to Non-Self-Employed")
lines(y=most, x=data$Group.1)
plot(y=rest, x=data$Group.1, type='l', col=3, ylab="", xlab="Year", xaxt='n', main="Importance of Income")
lines(y=most, x=data$Group.1)
plot(y=rest, x=data$Group.1, type='l', col=3, ylab="", xlab="Year", xaxt='n', main="Importance of Income")
axis(1, at=c(1972, 1980, 1990, 2000, 2012))
lines(y=most, col=2, x=data$Group.1, lty=2)
lines(y=most, col=2, x=data$Group.1)
legend("topright", c("Income <= Most Important", "Income Most Important"), col=c(3,2))
plot(y=rest, x=data$Group.1, type='l', col=3, ylab="", xlab="Year", ylab="Year", xaxt='n', main="Importance of Income")
axis(1, at=c(1972, 1980, 1990, 2000, 2012))
lines(y=most, col=2, x=data$Group.1)
legend("topright", c("Income <= Most Important", "Income Most Important"), col=c(3,2))
plot(y=rest, x=data$Group.1, type='l', col=3, ylab="", xlab="Year", ylab="Count", xaxt='n', main="Importance of Income")
plot(y=rest, x=data$Group.1, type='l', col=3, xlab="Year", ylab="Count", xaxt='n', main="Importance of Income")
axis(1, at=c(1972, 1980, 1990, 2000, 2012))
lines(y=most, col=2, x=data$Group.1)
legend("topright", c("Income <= Most Important", "Income Most Important"), col=c(3,2))
head(gss$wrkslf)
head(gss$wrkslf, n=20)
head(gss$jobinc, n=20)
head(gss$jobinc, n=200)
head(gss$jobinc, n=2000)
tail(gss$jobinc, n=2000)
tail(gss$jobinc, n=200)
head(gss$wrkslf, n=20)
tail(gss$jobinc, n=200)
tail(gss$jobinc, n=20)
head(gss$wrkslf, n=20)
tail(gss$jobinc, n=50)
which R
datasets
library(datasets)
library(help="datasets")
ChickWeight
summary(ChickWeight)
cw = ChickWeight
plot(cw$Chick)
plot(cw$Time)
plot(cw$Time, type='l')
plot(cw$Chick, type='l')
typeof(cw$Chick)
typeof(cw$Diet)
plot(cw$Diet)
names(cw)
?by
attach(cw)
by(cw,Diet,mean)
by(cw,Diet,summary)
plot(Diet)
cw[3,]
cw[4,]
cw[3:10,]
cw[c(3:10, -4),]
cw[c(3:10),]
cw[c(3:10,4),]
cw[c(3:10,4,4,4),]
cw[c(3:10,4,4,-4),]
cw[-4,]
cw[-4:576,]
cw[-4:-576,]
cw[-4:-576,3]
cw[-4:-576,4]
cw[-4:-576,2]
typeof(cw)
cw
cw[sample(1:5,5),]
cw[sample(1:5,5),]
cw[sample(1:5,5),]
cw[sample(1:5,5),]
cw[sample(1:5,5),]
cw[sample(1:5,5),]
cw[sample(1:5,5),]
cw[sample(1:5,3),]
cw[sample(1:5,3),]
cw[sample(1:5,3),]
cw[sample(1:5,3),]
cw[sample(1:5,3),]
cw[sample(1:5,3),]
cw[sample(1:5,3),]
cw[sample(1:5,3),]
cw[sample(1:5,3,replace=F),]
cw[sample(1:5,3,replace=T),]
cw[sample(1:5,5,replace=T),]
cw[sample(1:5,5,replace=T),]
cw[sample(1:5,5,replace=T),]
cw[sample(1:5,5,replace=T),]
cw[sample(1:5,5,replace=T),]
cw[sample(1:5,5,replace=T),]
cw[order(Diet),]
cw[order(Diet),][1:5,]
cw[order(Diet),][1:5,]
cw[order(Diet),][1:5,]
cw[order(Diet),][1:5,]
cw[order(weight),][1:5,]
cw[order(weight),][1:5,]
cw[order(weight),][1:5,]
cw[order(weight),][1:5,]
cw[order(weight),][1:5,]
cw[order(weight,Chick),][1:5,]
cw[order(weight,Chick),][1:5,]
cw[order(weight,Chick),]
cw[order(weight,Chick),][1:5,]
cw[order(weight),][1:5,]
by(cw,Diet,max)
by(cw$weight,Diet)
by(cw$weight,Diet, max)
by(cw$weight,Diet,max)
by(cw$weight,Diet,media)
by(cw$weight,Diet,median)
by(cw$weight,Diet,summary)
?sapply
sapply(cw, is.numeric)
sapply(cw, is.factor)
sapply(cw, typeof)
?factor
cw[,sapply(cw,is.numeric)]
cw[1:5,sapply(cw,is.numeric)]
cw[1:5,sapply(cw,is.factor)]
?cw
View(cw)
View(cw)
sapply(cw, is.character)
?which
which(Chick==1)
which(Chick==2)
which(Chick==3)
which(Chick==4)
?na.omit
?na
options("na.actoin")
options("na.action")
?apply
apply(cw,1,is.na)
apply(cw,2,is.na)
apply(cw,2,sum)
apply(cw,2,is.numeric)
apply(cw,2,is.factor)
apply(cw,2,is.integer)
apply(cw,1,is.integer)
apply(cw,2,sum)
apply(cw,2,print)
apply(cw,2,print)[1:5,]
apply(cw,1,print)[1:5,]
apply(cw,2,print)[1:5,]
apply(apply(cw,2,as.numeric),2,sum)
apply(apply(cw,2,=1),2,sum)
apply(apply(cw,2,==1),2,sum)
apply(apply(cw,2,function(x) x==1 ),2,sum)
apply(apply(cw,2,function(x) x==2 ),2,sum)
apply(apply(cw,2,function(x) x==20 ),2,sum)
apply(cw,2,function(x) x==20 )
duplicated(Diet)
cw[,!duplicated(Diet)]
cw[!duplicated(Diet),]
cw[!duplicated(Time),]
cw[!duplicated(Chich),]
cw[!duplicated(Chick),]
cw[!duplicated(Time),]
cw[!duplicated(weight),]
duplicated(cw)
sum(duplicated(cw))
plot(rpois(1000))
plot(rpois(1000,1))
plot(rpois(1000,0.4))
hist(rpois(1000,0.4))
plot(rpois(10000,0.4))
plot(rpois(10000,0.1))
hist(rpois(10000,0.1))
hist(rpois(10000,0.9))
hist(rpois(10000,0.9999))
?strptime
unique(Chick)
unique(Diet)
?match
?merge
?cbind
?unlist
?sweep
ls
head(cw)
new.row = cw[1,]
new.row[1]
new.row[2]
new.row[1]=-1
new.row[2]=-1
new.row[3]=-1
new.row[1:5]=-1
new.row
new.row = new.row[,-5]
new.row
tw = cw
rbind(tw, new.row)
rm(tw)
rm(new.row)
ls
?rbind
tw=cw[1:3,]
tw
unlist(tw)
unlist(tw)[1]
unlist(tw)[2]
unlist(tw)[3]
unlist(tw)[4]
?unlinst
?unlist
unlist(tw,use.names=F)
names(unlist(tw))
names(unlist(tw,use.names=F))
names(unlist(tw))
foo=unlist(tw)
names(foo) = NULL
foo
rm(foo)
ls
ls()
?tapple
?tapply
summary(cw)
plot(Chick,Time)
plot(weight ~ Time+Chick+Diet
)
plot(Time,Chick)
plot(Time,Weight)
plot(Time,weight)
plot(weight~Time)
plot(weight~Time)
plot(weight~Time)
abline(lm(weight~Time))
abline(lm(weight~Time),color="red")
abline(lm(weight~Time),col="red")
abline(lm(weight~Time),col="blue")
abline(lm(weight~Time),col="red")
abline(lm(weight~Time),col="red")
abline(lm(weight~Time),col="red")
plot(weight~Time)
abline(lm(weight~Time),col="red")
abline(lm(weight~Time+Diet),col="red")
abline(lm(weight~Time+Diet),col="blue")
legend(locator(1),"test")
legend
?legend
legend(locator(1),c("test","t2"),pch=c(1,16),col=c("red","blue"))
legend("asdf")
legend(x=5,y=100,"asdf")
legend(x=5,y=100,"asdf")
?legend
legend("bottom", "(x,y)", pch = 1, title = "bottom")
legend("top", "(x,y)", pch = 1, title = "bottom")
points(1:10,200:210,pch=151)
points(1:10,201:210,pch=151)
points(1:10,201:210,pch=18)
points(1:10,201:210,pch=18,col="red")
points(x=1:10,y=201:210,pch=18,col="red")
points(x=1:10,y=101:110,pch=18,col="red")
points(x=1:10,y=101:110,pch=1,col="red")
points(x=1:1000,y=1:1000,pch=1,col="red")
?xaxt
??xaxt
?plot
window
?windows
windows()
windows
?plot
map=read.csv("/Users/hamiltont/Documents/Reading/Statistics/therbook/bowens.csv", header=T)
head(map)
attach(map)
nn = ifelse(north<60, north+100,north)
nn
summary(north)
windows
?window
?quartz
quartz(9,7)
plot(c(20,100),c(60,100))
plot(c(20,100),c(60,100),type="n")
quartz(9,7)
plot(c(20,100),c(60,100),type="n")
plot(c(20,100),c(60,100),type="n",xlab="",ylab="",xaxt="n",yaxt="n")
View(map)
text(east,nn,place)
rm(map)
rm(nn)
summary(cw)
by(cw,Chick,mean)
ls
by(cw,Diet,mean)
by(cw$weight,Diet,mean)
by(cw$weight,c(Diet,Time),mean)
by(cw$weight,Diet,time)
by(cw$weight,Diet,mean)
by(cw$weight,Diet)
by(cw$weight,Diet,echo)
by(cw$weight,Diet,print)
View(cw)
plot(weight~Time)
plot(weight~Time,pch=Chick)
plot(weight~Time,pch=Diet)
factor(Diet)
as.numeric(factor(Diet))
as.numeric(Diet)
plot(weight~Time,pch=as.numeric(Diet))
plot(weight~Time,pch=as.numeric(Chick))
range(Chick)
Chick
as.numeric(Chick)
range(as.numeric(Chick))
tw=cw[Chick<10,]
tw
tw=cw[as.numeric(Chick)<10,]
tw
tw
tw[3]
as.numeric(tw[3])
tw
tw = tw[,-3]
tw
tw=cw[(as.numeric(Chick)<10),]
tw
tw = tw[,-4]
tw
tw[3]
tw[,3]
as.numeric(tw[,3])
range(as.numeric(tw[,3]))
attach(tw)
plot(weight~Time)
plot(weight~Time,pch=as.numeric(Chick))
for (i in 1:max(as.numeric(Chick))) {}
for (i in 1:max(as.numeric(Chick))) {}
for (i in 1:max(as.numeric(Chick))) {
x = weight[as.numeric(Chick)==i]
y = Time[as.numeric(Chick)==i]
lines(y,x,type="b",col="gray")
}
as.numeric(Chick)
plot(weight~Time,pch=as.numeric(Chick),labels=weight)
plot(weight~Time,pch=as.numeric(Chick))
for (i in 1:max(as.numeric(Chick))) {
x = weight[as.numeric(Chick)==i]
y = Time[as.numeric(Chick)==i]
lines(y,x,type="b",col="gray")
}
?curve
curve(x^3)
curve(x^3+x/2)
curve(x^3+y)
curve(x^3)
curve(x^3+50)
curve(x^3+5)
curve(x^3+1/2*x^2)
curve(x^3)
curve(x^3,-5,5)
?curve
install.packages("swirl")
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
swirl()
plot(child~parent,galton)
plot(jitter(child,4) ~parent,galton)
regrline = lm(child~parent,galton)
regrline <- lm(child~parent,galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
setwd("/Users/hamiltont/remoteClasp/logs")
ls()
setwd("~/remoteClasp/logs/2014_10_03-16_13-EDT")
library(jsonlite)
install.packages("jsonlite")
library("jsonlite", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
fromJSON('["test", "sdasdf"]')
fromJSON('[{"name" : "bob"},{"name" : "robert"}]')
x = readLines("_emulatormanager.json")
x
x[0]
x[1]
fromJSON(x[1])
paste(x, collapse=,)
paste(x, collapse=',')
paste(x, collapse=',')
paste('[', paste(x, collapse=','), ']')
fromJSON(paste('[', paste(x, collapse=','), ']'))
emulators = fromJSON(paste('[', paste(x, collapse=','), ']'))
plot(emulators$emulators)
plot(emulators$emulators, emulators$boottime)
plot(emulators$emulators, emulators$boottime, type='l')
plot(emulators$emulators, emulators$boottime/1000, type='l')
plot(emulators$emulators, emulators$boottime/1000, type='l',
ylab="Boot Time (sec)", xlab="Active Emulators When Booting")
library(ggplot2)
ggplot(emulators, aes(x=emulators, y=boottime))
ggplot(emulators, aes(x=emulators, y=boottime)) + geom_line()
fromJSON('[{"name" : "bob"},{"name" : "robert"}]')
fromJSON('[{"name" : "bob"},{"nameasdfadf" : "robert"}]')
ls()
list.files(getwd())
y=  readLines("_node_8c1d9b5b-a89b-43d9-ae2b-21daa31bf942_metrics.json")
y
nodeMetrics = fromJson(paste('[', paste(y, collapse=','), ']'))
nodeMetrics = fromJSON(paste('[', paste(y, collapse=','), ']'))
y= readLines("_node_*_metrics.json")
Sys.glob("_node_*_metrics.json")
z = readLines(Sys.glob("_node_*_metrics.json"))
z[12]
z[-1]
head(z)
head(z,-1)
head(z,-10)
head(z,-1)
head(z,0)
tail(z)
Sys.glob("_node_*_metrics.json")[1]
Sys.glob("_node_*_metrics.json")
Sys.glob("_node*.json")
Sys.glob("_node*.json")[1]
cat("asdfasdf")
node_file = Sys.glob("_node_*_metrics.json")[1]
cat("Reading node metrics from: ", node_file)
node_file = Sys.glob("_node_*_metrics.json")[1]
cat("Reading node metrics from:", node_file)
node_file = Sys.glob("_node_*_metrics.json")[1]
cat("Reading node metrics from:", node_file)
metrics = readLines(Sys.glob("_node_*_metrics.json"))
# Remove last line as there is sometimes a file writing problem and this
# is truncated without a complete JSON object
metrics = head(z,-1)
fromJSON(paste('[', paste(metrics, collapse=','), ']'))
names(fromJSON(paste('[', paste(metrics, collapse=','), ']')))
metrics = fromJSON(paste('[', paste(metrics, collapse=','), ']'))
names(metrics)
?subset
is.na(NA)
is.na(asdfasdf)
metrics$pageOut
is.na(metrics$pageOut)
subset(metrics,is.na(pageOut))
swap = subset(metrics,is.na(pageOut))
names(swap)
swap$pageOut
swap = subset(metrics,!is.na(pageOut))
swap$pageOut
head(swap)
cpu = subset(metrics,!is.na(nice))
ram = subset(metrics,!is.na(ram))
swap = subset(metrics,!is.na(pageOut))
head(cpu)
head(ram)
plot(ram$freePercent)
plot(cpu$user)
plot(cpu$user,type='l')
plot(ram$freePercent)
lm(ram$freePercent)
ggploplot(cpu$user,type='l')
ggplot(ram, aes(x=freePercent)) + geom_line()
ggplot(ram, aes(x=freePercent,y=y)) + geom_line()
head(ram)
ggplot(ram, aes(y=freePercent)) + geom_line()
ggplot(ram, aes(y=freePercent,x=x)) + geom_line()
ggplot(ram, aes(x=x,y=freePercent)) + geom_line()
ggplot(ram, aes(x=x,y=freePercent))
ggplot(ram, aes(x=seq_along(freePercent),y=freePercent)) + geom_line()
ggplot(ram, aes(x=seq_along(freePercent),y=freePercent)) + geom_line() + scale_y_continuous(breaks=seq(65,105,1))
plot(cpu$user,type='l')
head(cpu)
plot(cpu$idle,type='l')
ggplot(cpu, aes(x=seq_along(idle), y=idle)) + geom_line()
ggplot(cpu, aes(x=seq_along(idle), y=idle)) + geom_line() + scale_y_continuous(breaks=seq(100,80,-1))
ggplot(cpu, aes(x=seq_along(idle), y=idle)) + geom_line() + scale_y_continuous(breaks=seq(80,100,1))
ggplot(cpu, aes(x=seq_along(idle), y=idle)) + geom_line()\
ggplot(cpu, aes(x=seq_along(idle), y=idle)) + geom_line()
ggplot(cpu, aes(x=seq_along(idle), y=idle)) + geom_line() + scale_y_continuous(breaks=seq(80,100))
ggplot(cpu, aes(x=seq_along(idle), y=idle)) + geom_line() + scale_y_continuous()
ggplot(cpu, aes(x=seq_along(idle), y=idle)) + geom_line() + scale_y_continuous(breaks=seq(1,100,3))
ggplot(cpu, aes(x=seq_along(idle), y=idle)) + geom_line() + scale_y_continuous(breaks=seq(0.80,1, 0.1))
ggplot(cpu, aes(x=seq_along(idle), y=idle)) + geom_line() + scale_y_continuous(breaks=seq(0.80,1, 0.01))
